height and width nung scnteen ako control dior sa style

flex - gingamit kung ilan kakainin dun sa space, kapag ung una is flex 1, and 2 flex for each view, meaning mas malaki papaunta kay 1 kasi 1/2 yon tas kay 2 ay 2/3 nung space 

flexDirection
- control the direction of the children san magllayout
column (default value) Align children from top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container.

row Align children from left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container.

column-reverse Align children from bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.

row-reverse Align children from right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container.

direction 
 -Layout direction specifies the direction in which children and text in a hierarchy should be laid out. Layout direction also affects what edge start and end refer to. By default, React Native lays out with LTR layout direction. In this mode start refers to left and end refers to right.
   gantu syntax nya : flex-start or kaya flex-end, kapag end right kapag start ay right 

   justifyContent
   - describe pano align the children inisde the container
   flex-start(default value) Align children of a container to the start of the container's main axis.

flex-end Align children of a container to the end of the container's main axis.

center Align children of a container in the center of the container's main axis.

space-between Evenly space off children across the container's main axis, distributing the remaining space between the children.

space-around Evenly space off children across the container's main axis, distributing the remaining space around the children. Compared to space-between, using space-around will result in space being distributed to the beginning of the first child and end of the last child.

space-evenly Evenly distribute children within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.

Align Items
alignItems describes how to align children along the cross axis of their container. It is very similar to justifyContent but instead of applying to the main axis, alignItems applies to the cross axis.
stretch (default value) Stretch children of a container to match the height of the container's cross axis.

flex-start Align children of a container to the start of the container's cross axis.

flex-end Align children of a container to the end of the container's cross axis.

center Align children of a container in the center of the container's cross axis.

baseline Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.

Align Self
alignSelf has the same options and effect as alignItems but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. alignSelf overrides any option set by the parent with alignItems.

Align Content
alignContent defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using flexWrap.
flex-start (default value) Align wrapped lines to the start of the container's cross axis.

flex-end Align wrapped lines to the end of the container's cross axis.

stretch (default value when using Yoga on the web) Stretch wrapped lines to match the height of the container's cross axis.

center Align wrapped lines in the center of the container's cross axis.

space-between Evenly space wrapped lines across the container's cross axis, distributing the remaining space between the lines.

space-around Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each end of the container has a half-sized space compared to the space between items.

space-evenly Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each space is the same size.

The flexWrap property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed.
Flex Basis, Grow, and Shrink
flexBasis is an axis-independent way of providing the default size of an item along the main axis. Setting the flexBasis of a child is similar to setting the width of that child if its parent is a container with flexDirection: row or setting the height of a child if its parent is a container with flexDirection: column. The flexBasis of an item is the default size of that item, the size of the item before any flexGrow and flexShrink calculations are performed.

flexGrow describes how much space within a container should be distributed among its children along the main axis. After laying out its children, a container will distribute any remaining space according to the flex grow values specified by its children.

flexGrow accepts any floating point value >= 0, with 0 being the default value. A container will distribute any remaining space among its children weighted by the children’s flexGrow values.

flexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis. flexShrink is very similar to flexGrow and can be thought of in the same way if any overflowing size is considered to be negative remaining space. These two properties also work well together by allowing children to grow and shrink as needed.

flexShrink accepts any floating point value >= 0, with 0 being the default value (on the web, the default is 1). A container will shrink its children weighted by the children’s flexShrink values.


